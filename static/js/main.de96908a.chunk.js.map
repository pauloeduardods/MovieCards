{"version":3,"sources":["components/Header.jsx","data.js","components/SearchBar.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","movies","title","subtitle","storyline","rating","imagePath","bookmarked","genre","SearchBar","textSearch","bind","checkboxInput","genreInput","searchText","onSearchTextChange","htmlFor","data-testid","type","id","value","name","onChange","bookmarkedOnly","onBookmarkedChange","checked","selectedGenre","onSelectedGenreChange","this","props","Rating","defaultProps","MovieCard","movie","alt","src","MovieList","map","key","AddMovie","state","handleChange","click","movieTitle","movieSubtitle","movieImage","movieRating","movieStoryline","movieGenre","target","setState","event","preventDefault","onClick","movieButton","MovieLibrary","bookmarkedFilter","genreFilter","addMovieFunc","newMovie","movieBookmark","filter","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAYeA,E,4JATb,WACE,OACE,4BAAQC,UAAU,qBAChB,wBAAIA,UAAU,cAAd,4B,GAJaC,IAAMC,WC8CZC,G,MAhDA,CACb,CACEC,MAAO,cACPC,SAAU,mBACVC,UAAW,iKACXC,OAAQ,IACRC,UAAW,0CACXC,YAAY,EACZC,MAAO,UAET,CACEN,MAAO,gBACPC,SAAU,iBACVC,UAAW,4HACXC,OAAQ,IACRC,UAAW,0CACXC,YAAY,EACZC,MAAO,WAET,CACEN,MAAO,qBACPC,SAAU,qBACVC,UAAW,qJACXC,OAAQ,EACRC,UAAW,oCACXC,YAAY,EACZC,MAAO,UAET,CACEN,MAAO,kBACPC,SAAU,kBACVC,UAAW,2LACXC,OAAQ,IACRC,UAAW,6BACXC,YAAY,EACZC,MAAO,UAET,CACEN,MAAO,gBACPC,SAAU,WACVC,UAAW,iKACXC,OAAQ,IACRC,UAAW,oCACXC,YAAY,EACZC,MAAO,a,qBC+CIC,E,kDAvFb,aAAe,IAAD,8BACZ,gBACKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAJN,E,8CAOd,SAAWG,EAAYC,GACrB,OACE,2BAAOC,QAAQ,oBAAoBC,cAAY,oBAA/C,kBAEE,2BACEC,KAAK,OACLC,GAAG,oBACHC,MAAQN,EACRO,KAAK,aACLC,SAAWP,EACXE,cAAY,kB,2BAMpB,SAAcM,EAAgBC,GAC5B,OACE,2BAAOR,QAAQ,uBAAuBC,cAAY,wBAAlD,4BAEE,2BACEC,KAAK,WACLC,GAAG,uBACHF,cAAY,iBACZQ,QAAUF,EACVF,KAAK,iBACLC,SAAWE,O,wBAMnB,SAAWE,EAAeC,GACxB,OACE,2BAAOX,QAAQ,oBAAoBC,cAAY,sBAA/C,wBAEE,4BACEE,GAAG,oBACHC,MAAQM,EACRJ,SAAWK,EACXN,KAAK,gBACLJ,cAAY,gBAEZ,4BAAQG,MAAM,GAAGH,cAAY,iBAA7B,SACA,4BAAQG,MAAM,SAASH,cAAY,iBAAnC,cACA,4BAAQG,MAAM,SAASH,cAAY,iBAAnC,cACA,4BAAQG,MAAM,WAAWH,cAAY,iBAArC,gB,oBAMR,WAAU,IAAD,EAQHW,KAAKC,MANPf,EAFK,EAELA,WACAC,EAHK,EAGLA,mBACAQ,EAJK,EAILA,eACAC,EALK,EAKLA,mBACAE,EANK,EAMLA,cACAC,EAPK,EAOLA,sBAEF,OACE,0BAAMV,cAAY,mBACfW,KAAKlB,WAAWI,EAAYC,GAC5Ba,KAAKhB,cAAcW,EAAgBC,GACnCI,KAAKf,WAAWa,EAAeC,Q,GAzEhB5B,IAAMC,WCAxB8B,E,4JACJ,WAAU,IACAzB,EAAWuB,KAAKC,MAAhBxB,OACR,OACE,yBAAKP,UAAU,oBAAoBmB,cAAY,UAC7C,0BAAMnB,UAAU,UAAUO,Q,GALbN,IAAMC,WAa3B8B,EAAOC,aAAe,CACpB1B,OAAQ,aAGKyB,QCYAE,E,4JA3Bb,WAAU,IACAC,EAAUL,KAAKC,MAAfI,MACA/B,EAAkD+B,EAAlD/B,MAAOC,EAA2C8B,EAA3C9B,SAAUC,EAAiC6B,EAAjC7B,UAAWC,EAAsB4B,EAAtB5B,OAAQC,EAAc2B,EAAd3B,UAC5C,OACE,yBAAKR,UAAU,aAAamB,cAAY,cACtC,yBAAKiB,IAAI,cAAcpC,UAAU,mBAAmBqC,IAAM7B,IAC1D,yBAAKR,UAAU,mBACb,wBAAImB,cAAY,mBAAmBnB,UAAU,oBAAoBI,GACjE,wBAAIJ,UAAU,uBAAuBK,GACrC,uBAAGL,UAAU,wBAAwBM,IAEvC,kBAAC,EAAD,CAAQC,OAASA,S,GAZDN,IAAMC,WCmBfoC,E,4JAjBb,WAAU,IACAnC,EAAW2B,KAAKC,MAAhB5B,OAER,OACE,yBAAKgB,cAAY,aAAanB,UAAU,cACpCG,EAAOoC,KAAI,SAACJ,GAAD,OAAW,kBAAC,EAAD,CAAWK,IAAML,EAAM/B,MAAQ+B,MAAQA,Y,GAN/ClC,IAAMC,WCmKfuC,E,kDApKb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CACXrC,SAAU,GACVD,MAAO,GACPI,UAAW,GACXF,UAAW,GACXC,OAAQ,EACRG,MAAO,UAET,EAAKiC,aAAe,EAAKA,aAAa9B,KAAlB,gBACpB,EAAK+B,MAAQ,EAAKA,MAAM/B,KAAX,gBACb,EAAKgC,WAAa,EAAKA,WAAWhC,KAAhB,gBAClB,EAAKiC,cAAgB,EAAKA,cAAcjC,KAAnB,gBACrB,EAAKkC,WAAa,EAAKA,WAAWlC,KAAhB,gBAClB,EAAKmC,YAAc,EAAKA,YAAYnC,KAAjB,gBACnB,EAAKoC,eAAiB,EAAKA,eAAepC,KAApB,gBACtB,EAAKqC,WAAa,EAAKA,WAAWrC,KAAhB,gBAjBD,E,gDAoBnB,YAAyC,IAAD,IAAzBsC,OAAU9B,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAC3BQ,KAAKsB,SAAL,eACG/B,EAAKC,M,wBAIV,SAAWlB,GACT,OACE,2BAAOc,QAAQ,QAAQC,cAAY,qBAAnC,YAEE,2BACEE,GAAG,QACHD,KAAK,OACLD,cAAY,cACZG,MAAQlB,EACRoB,SAAWM,KAAKa,kB,2BAMxB,SAActC,GACZ,OACE,2BAAOa,QAAQ,WAAWC,cAAY,wBAAtC,eAEE,2BACEE,GAAG,WACHD,KAAK,OACLD,cAAY,iBACZG,MAAQjB,EACRmB,SAAWM,KAAKa,kB,wBAMxB,SAAWnC,GACT,OACE,2BAAOU,QAAQ,YAAYC,cAAY,qBAAvC,SAEE,2BACEE,GAAG,YACHD,KAAK,OACLD,cAAY,cACZG,MAAQd,EACRgB,SAAWM,KAAKa,kB,4BAMxB,SAAerC,GACb,OACE,2BAAOY,QAAQ,YAAYC,cAAY,yBAAvC,UAEE,8BACEE,GAAG,YACHC,MAAQhB,EACRa,cAAY,kBACZK,SAAWM,KAAKa,kB,yBAMxB,SAAYpC,GACV,OACE,2BAAOW,QAAQ,SAASC,cAAY,sBAApC,kBAEE,2BACEC,KAAK,SACLC,GAAG,SACHF,cAAY,eACZG,MAAQf,EACRiB,SAAWM,KAAKa,kB,wBAMxB,SAAWjC,GACT,OACE,2BAAOQ,QAAQ,QAAQC,cAAY,qBAAnC,YAEE,4BACEE,GAAG,QACHF,cAAY,cACZG,MAAQZ,EACRc,SAAWM,KAAKa,cAEhB,4BAAQrB,MAAM,SAASH,cAAY,gBAAnC,cACA,4BAAQG,MAAM,SAASH,cAAY,gBAAnC,cACA,4BAAQG,MAAM,WAAWH,cAAY,gBAArC,gB,mBAMR,SAAMkC,GACJA,EAAMC,kBAENC,EADoBzB,KAAKC,MAAjBwB,SACAzB,KAAKY,OACbZ,KAAKsB,SAAS,CACZ/C,SAAU,GACVD,MAAO,GACPI,UAAW,GACXF,UAAW,GACXC,OAAQ,EACRG,MAAO,a,yBAIX,WACE,OACE,4BACEU,KAAK,SACLD,cAAY,cACZoC,QAAUzB,KAAKc,OAHjB,qB,oBAUJ,WAAU,IAAD,EAC0Dd,KAAKY,MAA9DtC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUG,EADlB,EACkBA,UAAWF,EAD7B,EAC6BA,UAAWC,EADxC,EACwCA,OAAQG,EADhD,EACgDA,MACvD,OACE,0BAAMS,cAAY,kBACfW,KAAKe,WAAWzC,GAChB0B,KAAKgB,cAAczC,GACnByB,KAAKiB,WAAWvC,GAChBsB,KAAKmB,eAAe3C,GACpBwB,KAAKkB,YAAYzC,GACjBuB,KAAKoB,WAAWxC,GAChBoB,KAAK0B,mB,GA3JSvD,IAAMC,WC+EduD,E,kDA3Eb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CACX1B,WAAY,GACZS,gBAAgB,EAChBG,cAAe,GACfzB,OAAQ4B,EAAM5B,QAEhB,EAAKwC,aAAe,EAAKA,aAAa9B,KAAlB,gBACpB,EAAK6C,iBAAmB,EAAKA,iBAAiB7C,KAAtB,gBACxB,EAAK8C,YAAc,EAAKA,YAAY9C,KAAjB,gBACnB,EAAK+C,aAAe,EAAKA,aAAa/C,KAAlB,gBAXH,E,gDAcnB,YAA0D,IAAD,IAA1CsC,OAAU/B,EAAgC,EAAhCA,KAAMG,EAA0B,EAA1BA,KAAMI,EAAoB,EAApBA,QAASL,EAAW,EAAXA,MAC/B,aAATF,EAIJU,KAAKsB,SAAL,eAAiB7B,EAAOD,IAHtBQ,KAAKsB,SAAL,eAAiB7B,EAAOI,M,8BAM5B,SAAiBQ,GAEf,OAD2BL,KAAKY,MAAxBjB,gBAECU,EAAM1B,a,yBAKjB,SAAY0B,GAAQ,IACVP,EAAkBE,KAAKY,MAAvBd,cACR,MAAsB,KAAlBA,GACKO,EAAMzB,QAAUkB,I,0BAK3B,SAAaiC,GAAW,IACd1D,EAAW2B,KAAKY,MAAhBvC,OACR2B,KAAKsB,SAAS,CAAEjD,OAAO,GAAD,mBAAMA,GAAN,CAAc0D,Q,oBAGtC,WAAU,IAAD,SACuD/B,KAAKY,MAA3D1B,EADD,EACCA,WAAYS,EADb,EACaA,eAAgBG,EAD7B,EAC6BA,cAC9BkC,EAFC,EAC4C3D,OACtB4D,QAAO,SAAC5B,GACnC,GAAI,EAAKuB,iBAAiBvB,IAAU,EAAKwB,YAAYxB,GAAQ,CAAC,IACpD/B,EAA+B+B,EAA/B/B,MAAOC,EAAwB8B,EAAxB9B,SAAUC,EAAc6B,EAAd7B,UACzB,OAAOF,EAAM4D,cAAcC,SAASjD,EAAWgD,gBAC5C3D,EAAS2D,cAAcC,SAASjD,EAAWgD,gBAC3C1D,EAAU0D,cAAcC,SAASjD,EAAWgD,eAEjD,OAAO,KAET,OACE,iCACE,kBAAC,EAAD,CACEhD,WAAaA,EACbC,mBAAqBa,KAAKa,aAC1BlB,eAAiBA,EACjBC,mBAAqBI,KAAKa,aAC1Bf,cAAgBA,EAChBC,sBAAwBC,KAAKa,eAE/B,kBAAC,EAAD,CAAWxC,OAAS2D,IACpB,kBAAC,EAAD,CAAUP,QAAUzB,KAAK8B,oB,GAlEN3D,IAAMC,WCSlBgE,MATf,WACE,OACE,yBAAKlE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcG,OAASA,MCETgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.de96908a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  constructor() {\n    super();\n    this.textSearch = this.textSearch.bind(this);\n    this.checkboxInput = this.checkboxInput.bind(this);\n    this.genreInput = this.genreInput.bind(this);\n  }\n\n  textSearch(searchText, onSearchTextChange) {\n    return (\n      <label htmlFor=\"text-input-search\" data-testid=\"text-input-label\">\n        Inclui o texto:\n        <input\n          type=\"text\"\n          id=\"text-input-search\"\n          value={ searchText }\n          name=\"searchText\"\n          onChange={ onSearchTextChange }\n          data-testid=\"text-input\"\n        />\n      </label>\n    );\n  }\n\n  checkboxInput(bookmarkedOnly, onBookmarkedChange) {\n    return (\n      <label htmlFor=\"forms-input-checkbox\" data-testid=\"checkbox-input-label\">\n        Mostrar somente favoritos\n        <input\n          type=\"checkbox\"\n          id=\"forms-input-checkbox\"\n          data-testid=\"checkbox-input\"\n          checked={ bookmarkedOnly }\n          name=\"bookmarkedOnly\"\n          onChange={ onBookmarkedChange }\n        />\n      </label>\n    );\n  }\n\n  genreInput(selectedGenre, onSelectedGenreChange) {\n    return (\n      <label htmlFor=\"select-form-input\" data-testid=\"select-input-label\">\n        Filtrar por gênero\n        <select\n          id=\"select-form-input\"\n          value={ selectedGenre }\n          onChange={ onSelectedGenreChange }\n          name=\"selectedGenre\"\n          data-testid=\"select-input\"\n        >\n          <option value=\"\" data-testid=\"select-option\">Todos</option>\n          <option value=\"action\" data-testid=\"select-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const {\n      searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n    return (\n      <form data-testid=\"search-bar-form\">\n        {this.textSearch(searchText, onSearchTextChange)}\n        {this.checkboxInput(bookmarkedOnly, onBookmarkedChange)}\n        {this.genreInput(selectedGenre, onSelectedGenreChange)}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number };\n\nRating.defaultProps = {\n  rating: 'undefined',\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.click = this.click.bind(this);\n    this.movieTitle = this.movieTitle.bind(this);\n    this.movieSubtitle = this.movieSubtitle.bind(this);\n    this.movieImage = this.movieImage.bind(this);\n    this.movieRating = this.movieRating.bind(this);\n    this.movieStoryline = this.movieStoryline.bind(this);\n    this.movieGenre = this.movieGenre.bind(this);\n  }\n\n  handleChange({ target: { id, value } }) {\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  movieTitle(title) {\n    return (\n      <label htmlFor=\"title\" data-testid=\"title-input-label\">\n        Título\n        <input\n          id=\"title\"\n          type=\"text\"\n          data-testid=\"title-input\"\n          value={ title }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  movieSubtitle(subtitle) {\n    return (\n      <label htmlFor=\"subtitle\" data-testid=\"subtitle-input-label\">\n        Subtítulo\n        <input\n          id=\"subtitle\"\n          type=\"text\"\n          data-testid=\"subtitle-input\"\n          value={ subtitle }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  movieImage(imagePath) {\n    return (\n      <label htmlFor=\"imagePath\" data-testid=\"image-input-label\">\n        Imagem\n        <input\n          id=\"imagePath\"\n          type=\"text\"\n          data-testid=\"image-input\"\n          value={ imagePath }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  movieStoryline(storyline) {\n    return (\n      <label htmlFor=\"storyline\" data-testid=\"storyline-input-label\">\n        Sinopse\n        <textarea\n          id=\"storyline\"\n          value={ storyline }\n          data-testid=\"storyline-input\"\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  movieRating(rating) {\n    return (\n      <label htmlFor=\"rating\" data-testid=\"rating-input-label\">\n        Avaliação\n        <input\n          type=\"number\"\n          id=\"rating\"\n          data-testid=\"rating-input\"\n          value={ rating }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  movieGenre(genre) {\n    return (\n      <label htmlFor=\"genre\" data-testid=\"genre-input-label\">\n        Gênero\n        <select\n          id=\"genre\"\n          data-testid=\"genre-input\"\n          value={ genre }\n          onChange={ this.handleChange }\n        >\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  click(event) {\n    event.preventDefault();\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  movieButton() {\n    return (\n      <button\n        type=\"submit\"\n        data-testid=\"send-button\"\n        onClick={ this.click }\n      >\n        Adicionar filme\n      </button>\n    );\n  }\n\n  render() {\n    const { title, subtitle, imagePath, storyline, rating, genre } = this.state;\n    return (\n      <form data-testid=\"add-movie-form\">\n        {this.movieTitle(title)}\n        {this.movieSubtitle(subtitle)}\n        {this.movieImage(imagePath)}\n        {this.movieStoryline(storyline)}\n        {this.movieRating(rating)}\n        {this.movieGenre(genre)}\n        {this.movieButton()}\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default AddMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBar from './SearchBar';\nimport MovieList from './MovieList';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: props.movies,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.bookmarkedFilter = this.bookmarkedFilter.bind(this);\n    this.genreFilter = this.genreFilter.bind(this);\n    this.addMovieFunc = this.addMovieFunc.bind(this);\n  }\n\n  handleChange({ target: { type, name, checked, value } }) {\n    if (type === 'checkbox') {\n      this.setState({ [name]: checked });\n      return;\n    }\n    this.setState({ [name]: value });\n  }\n\n  bookmarkedFilter(movie) {\n    const { bookmarkedOnly } = this.state;\n    if (bookmarkedOnly) {\n      return movie.bookmarked;\n    }\n    return true;\n  }\n\n  genreFilter(movie) {\n    const { selectedGenre } = this.state;\n    if (selectedGenre !== '') {\n      return movie.genre === selectedGenre;\n    }\n    return true;\n  }\n\n  addMovieFunc(newMovie) {\n    const { movies } = this.state;\n    this.setState({ movies: [...movies, newMovie] });\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre, movies } = this.state;\n    const movieBookmark = movies.filter((movie) => {\n      if (this.bookmarkedFilter(movie) && this.genreFilter(movie)) {\n        const { title, subtitle, storyline } = movie;\n        return title.toLowerCase().includes(searchText.toLowerCase())\n        || subtitle.toLowerCase().includes(searchText.toLowerCase())\n        || storyline.toLowerCase().includes(searchText.toLowerCase());\n      }\n      return false;\n    });\n    return (\n      <section>\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.handleChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleChange }\n        />\n        <MovieList movies={ movieBookmark } />\n        <AddMovie onClick={ this.addMovieFunc } />\n      </section>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MovieLibrary;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport movies from './data';\nimport MovieLibrary from './components/MovieLibrary';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ movies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}